<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Automation on Hiren Patel</title>
    <link>https://patelhiren.com/tags/automation/</link>
    <description>Recent content in Automation on Hiren Patel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© Copyright {year}, Hiren Patel</copyright>
    <lastBuildDate>Fri, 24 Apr 2020 12:06:38 -0400</lastBuildDate>
    
	<atom:link href="https://patelhiren.com/tags/automation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using mermaid-js to generate Flow Charts</title>
      <link>https://patelhiren.com/blog/using-mermaid-js-to-generate-flow-charts/</link>
      <pubDate>Fri, 24 Apr 2020 12:06:38 -0400</pubDate>
      
      <guid>https://patelhiren.com/blog/using-mermaid-js-to-generate-flow-charts/</guid>
      <description>&lt;p&gt;I often need to document a flow chart for new features I am planning to implement. Usually generating flow chart needed me to go to an application that would let me draw rectangles, text, etc. Today I learned about &lt;a href=&#34;https://github.com/mermaid-js/mermaid&#34;title=&#34;mermaid-js GitHub Page&#34;target=&#34;_blank&#34;&gt;mermaid-js&lt;/a&gt; which allows one to use Markdown like syntax to generte various diagrams including flow charts.&lt;/p&gt;</description>
      
      <content:encoded><![CDATA[<p>I often need to document a flow chart for new features I am planning to implement. Usually generating flow chart needed me to go to an application that would let me draw rectangles, text, etc. Today I learned about <a href="https://github.com/mermaid-js/mermaid"title="mermaid-js GitHub Page"target="_blank">mermaid-js</a> which allows one to use Markdown like syntax to generte various diagrams including flow charts.</p>
<p>There is a live editor available at <a href="https://mermaidjs.github.io/mermaid-live-editor/"target="_blank">https://mermaidjs.github.io/mermaid-live-editor/</a> that allows you to to enter Markdown like text and generate a PNG/SVG output that you can download and embed in your documentation.</p>
<pre tabindex="0"><code class="language-mermaid" data-lang="mermaid">graph TD
A[Christmas] --&gt;|Get money| B(Go shopping)
B --&gt; C{Let me think}
C --&gt;|One| D[Laptop]
C --&gt;|Two| E[iPhone]
C --&gt;|Three| F[fa:fa-car Car]
</code></pre><p>The embedded code block above would generate a flow chart image like the one below.</p>
<p>

<span class="image-container">
    <span class="link">
        <a target="_blank" rel="noopener noreferrer" href="images/mermaid-diagram.png">
            <picture>

                    <source 
                        srcset="
                        
                        
                        

                        

                        

                        /blog/using-mermaid-js-to-generate-flow-charts/images/Dark/mermaid-diagram.png
                        "
                        media="(prefers-color-scheme: dark)"
                    /><source 
                    srcset="
                    
                    
                    

                    

                    

                    /blog/using-mermaid-js-to-generate-flow-charts/images/mermaid-diagram.png
                    " 
                />
                
                <img alt="mermaid - flow chart" 
                        src="/blog/using-mermaid-js-to-generate-flow-charts/images/mermaid-diagram.png" />
            </picture>
        </a>
    </span>
    <span class="caption">
        <span class="title"></span>
    </span>
</span></a></p>
<p>mermaid-js supports generating</p>
<ul>
<li>Flow Chart</li>
<li>Sequence Diagram</li>
<li>Class Diagram</li>
<li>State Diagram</li>
<li>Gantt Chart</li>
<li>Pie Chart</li>
<li>ER Diagram</li>
</ul>
<p>Documentation is available at <a href="https://mermaid-js.github.io/mermaid"target="_blank">https://mermaid-js.github.io/mermaid</a>.</p>]]></content:encoded>
      
    </item>
    
    <item>
      <title>PNG Crush Automator Action</title>
      <link>https://patelhiren.com/blog/pngcrush-automator-action/</link>
      <pubDate>Sun, 12 Apr 2020 22:04:30 -0400</pubDate>
      
      <guid>https://patelhiren.com/blog/pngcrush-automator-action/</guid>
      <description>&lt;p&gt;When using png files on the web it is often preferred to use tools like pngcrush on them to optimize their size. This is usually a manual process where a command line tool or website is used to process each image file. I decided to automate this process for me via macOS &lt;a href=&#34;https://support.apple.com/guide/automator/welcome/mac&#34;target=&#34;_blank&#34;&gt;Automator&lt;/a&gt;.&lt;/p&gt;</description>
      
      <content:encoded><![CDATA[<p>When using png files on the web it is often preferred to use tools like pngcrush on them to optimize their size. This is usually a manual process where a command line tool or website is used to process each image file. I decided to automate this process for me via macOS <a href="https://support.apple.com/guide/automator/welcome/mac"target="_blank">Automator</a>.</p>
<p>To crush png images I use the opensource tool <a href="https://pmt.sourceforge.io/pngcrush/"target="_blank">PNG Crush</a>.</p>
<p>If you have <a href="https://developer.apple.com/xcode/"target="_blank">Xcode</a> installed, the pngcrush tool is included as a part of the iOS SDK and there is no additional download required.</p>
<p>If you do not have Xcode you may install <em>PNG Crush</em> via <a href="https://brew.sh"target="_blank">Homebrew</a> using the following command.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">brew install pngcrush
</span></span></code></pre></td></tr></table>
</div>
</div><p>If using Xcode method, the <em><strong>pngcrush</strong></em> binary will be at <code>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/pngcrush</code>.</p>
<p>If using Homebrew, the <em><strong>pngcrush</strong></em> binary will be at <code>/usr/local/bin/pngcrush</code></p>
<p>For the rest of the article I will assume the Homebrew method is used. You just need to adjust the paths for the binary if the Xcode method is used.</p>
<p>To crush a PNG image via Terminal you can run the below command.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl"><span class="c1"># pngcrush will process the input.png and create a compressed crushed.png</span>
</span></span><span class="line"><span class="cl">pngcrush input.png crushed.png
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="automating-the-process-using-automator-on-macos">Automating the process using Automator on macOS.</h2>
<ul>
<li>Launch <em><strong>Automator</strong></em> via Spotlight Search.</li>
<li>Select <em>File</em>, <em>New</em> from the menu. Select <em><strong>Quick Action</strong></em> and click the <em>Choose</em> button.</li>
</ul>
<p>

<span class="image-container">
    <span class="link">
        <a target="_blank" rel="noopener noreferrer" href="images/01.png">
            <picture><source 
                    srcset="
                    
                    /blog/pngcrush-automator-action/images/01_hu10299906894841770542.png 400w,
                    
                    
                    
                    /blog/pngcrush-automator-action/images/01_hu15144809330729729250.png 600w,
                    

                    
                    /blog/pngcrush-automator-action/images/01_hu7445959027752455568.png 1000w,
                    

                    
                    /blog/pngcrush-automator-action/images/01_hu11732919017207006832.png 1200w,
                    

                    /blog/pngcrush-automator-action/images/01.png
                    " 
                />
                
                <img alt="Automator - New" 
                        src="/blog/pngcrush-automator-action/images/01.png" />
            </picture>
        </a>
    </span>
    <span class="caption">
        <span class="title"></span>
    </span>
</span></a></p>
<ul>
<li>In the new windows that loads, select the options as below.
<ul>
<li>Workflow receives current - <em><strong>image files</strong></em></li>
<li>in - <em><strong>Finder.app</strong></em></li>
</ul>
</li>
</ul>
<p>

<span class="image-container">
    <span class="link">
        <a target="_blank" rel="noopener noreferrer" href="images/02.png">
            <picture><source 
                    srcset="
                    
                    /blog/pngcrush-automator-action/images/02_hu17727269787472406711.png 400w,
                    
                    
                    
                    /blog/pngcrush-automator-action/images/02_hu14804665408686312687.png 600w,
                    

                    
                    /blog/pngcrush-automator-action/images/02_hu3689528950084346152.png 1000w,
                    

                    
                    /blog/pngcrush-automator-action/images/02_hu6912418297809607524.png 1200w,
                    

                    /blog/pngcrush-automator-action/images/02.png
                    " 
                />
                
                <img alt="Automator - New Action" 
                        src="/blog/pngcrush-automator-action/images/02.png" />
            </picture>
        </a>
    </span>
    <span class="caption">
        <span class="title"></span>
    </span>
</span></a></p>
<ul>
<li>In the search box, type <em><strong>Shell</strong></em> and select the <em><strong>Run Shell Script</strong></em> option to add to the automation on the right by double clicking on it.</li>
</ul>
<p>

<span class="image-container">
    <span class="link">
        <a target="_blank" rel="noopener noreferrer" href="images/03.png">
            <picture><source 
                    srcset="
                    
                    /blog/pngcrush-automator-action/images/03_hu11889311241427984287.png 400w,
                    
                    
                    
                    /blog/pngcrush-automator-action/images/03_hu10259793895010358155.png 600w,
                    

                    
                    /blog/pngcrush-automator-action/images/03_hu2327663832978502619.png 1000w,
                    

                    
                    /blog/pngcrush-automator-action/images/03_hu12576988910102508920.png 1200w,
                    

                    /blog/pngcrush-automator-action/images/03.png
                    " 
                />
                
                <img alt="Automator - Run Shell Script" 
                        src="/blog/pngcrush-automator-action/images/03.png" />
            </picture>
        </a>
    </span>
    <span class="caption">
        <span class="title"></span>
    </span>
</span></a></p>
<ul>
<li>Change the <em><strong>Pass Input</strong></em> option to <em><strong>as arguments</strong></em>.</li>
<li>Enter the below script commands in the Shell Script box.</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl"><span class="k">for</span> f in <span class="s2">&#34;</span><span class="nv">$@</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Verify that the extension of the file is actually png</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># (case insensitive compare)</span>
</span></span><span class="line"><span class="cl">  <span class="nv">filename</span><span class="o">=</span><span class="k">$(</span>basename <span class="s2">&#34;</span><span class="nv">$f</span><span class="s2">&#34;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">  <span class="nv">ext</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">filename</span><span class="p">##*.</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nb">echo</span> <span class="s2">&#34;</span><span class="nv">$ext</span><span class="s2">&#34;</span> <span class="p">|</span> grep -i png<span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># If the file is a png, run pngcrush on it.</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Save the output in the same place with a temporary extension</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># of .crushed_</span>
</span></span><span class="line"><span class="cl">    /opt/homebrew/bin/pngcrush <span class="s2">&#34;</span><span class="nv">$f</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">$f</span><span class="s2">.crushed_&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Overwrite the original file with the crushed file.</span>
</span></span><span class="line"><span class="cl">    mv <span class="s2">&#34;</span><span class="nv">$f</span><span class="s2">.crushed_&#34;</span> <span class="s2">&#34;</span><span class="nv">$f</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Save the automation as <em><strong>PNG Crush</strong></em>.</li>
</ul>
<p>

<span class="image-container">
    <span class="link">
        <a target="_blank" rel="noopener noreferrer" href="images/04.png">
            <picture><source 
                    srcset="
                    
                    /blog/pngcrush-automator-action/images/04_hu7528804344232696783.png 400w,
                    
                    
                    
                    /blog/pngcrush-automator-action/images/04_hu116686565856275343.png 600w,
                    

                    
                    /blog/pngcrush-automator-action/images/04_hu18002071194194411037.png 1000w,
                    

                    
                    /blog/pngcrush-automator-action/images/04_hu17761922244676043234.png 1200w,
                    

                    /blog/pngcrush-automator-action/images/04.png
                    " 
                />
                
                <img alt="Automator - Final Code" 
                        src="/blog/pngcrush-automator-action/images/04.png" />
            </picture>
        </a>
    </span>
    <span class="caption">
        <span class="title"></span>
    </span>
</span></a></p>
<p>You may now browse to any png file(s) in Finder and right click, select <em><strong>Services</strong></em> -&gt; <em><strong>PNG Crush</strong></em>.</p>
<p>

<span class="image-container">
    <span class="link">
        <a target="_blank" rel="noopener noreferrer" href="images/05.png">
            <picture><source 
                    srcset="
                    
                    /blog/pngcrush-automator-action/images/05_hu13314229300956893167.png 400w,
                    
                    
                    
                    /blog/pngcrush-automator-action/images/05_hu2719413684304142717.png 600w,
                    

                    
                    /blog/pngcrush-automator-action/images/05_hu3687499236447916352.png 1000w,
                    

                    
                    /blog/pngcrush-automator-action/images/05_hu3546587971612518519.png 1200w,
                    

                    /blog/pngcrush-automator-action/images/05.png
                    " 
                />
                
                <img alt="Finder - Services Menu" 
                        src="/blog/pngcrush-automator-action/images/05.png" />
            </picture>
        </a>
    </span>
    <span class="caption">
        <span class="title"></span>
    </span>
</span></a></p>
<p>While the automation is running you will see a spinning cog in you Menu bar in the top right. When the cog disappears the automation is done and your images have been processed by <em><strong>pngcrush</strong></em>.</p>
<p>

<span class="image-container">
    <span class="link">
        <a target="_blank" rel="noopener noreferrer" href="images/06.png">
            <picture><source 
                    srcset="
                    
                    /blog/pngcrush-automator-action/images/06_hu3291881629291868817.png 400w,
                    
                    
                    

                    

                    

                    /blog/pngcrush-automator-action/images/06.png
                    " 
                />
                
                <img alt="Finder - Automator Running" 
                        src="/blog/pngcrush-automator-action/images/06.png" />
            </picture>
        </a>
    </span>
    <span class="caption">
        <span class="title"></span>
    </span>
</span></a></p>]]></content:encoded>
      
    </item>
    
  </channel>
</rss>